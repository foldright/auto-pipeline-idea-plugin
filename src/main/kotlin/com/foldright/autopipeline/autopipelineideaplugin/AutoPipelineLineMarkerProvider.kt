package com.foldright.autopipeline.autopipelineideaplugin

import com.intellij.codeInsight.daemon.RelatedItemLineMarkerInfo
import com.intellij.codeInsight.daemon.RelatedItemLineMarkerProvider
import com.intellij.codeInsight.navigation.NavigationGutterIconBuilder
import com.intellij.openapi.editor.markup.GutterIconRenderer
import com.intellij.psi.*
import com.intellij.psi.impl.source.PsiJavaFileImpl
import com.intellij.psi.search.GlobalSearchScope

class AutoPipelineLineMarkerProvider : RelatedItemLineMarkerProvider() {

    override fun collectNavigationMarkers(
        element: PsiElement,
        result: MutableCollection<in RelatedItemLineMarkerInfo<*>>
    ) {

        if (element !is PsiIdentifier ||
            element.parent !is PsiJavaCodeReferenceElement ||
            element.parent.parent !is PsiAnnotation
        ) {
            return
        }

        val psiJavaCodeReferenceElement = element.parent as PsiJavaCodeReferenceElement


        if (psiJavaCodeReferenceElement.qualifiedName != "com.foldright.auto.pipeline.AutoPipeline") {
            return
        }

        val psiAnnotation = psiJavaCodeReferenceElement.parent as PsiAnnotation
        val psiModifierList = psiAnnotation.parent as PsiModifierList
        val psiClass = psiModifierList.parent as PsiClass
        val psiFile = psiClass.parent as PsiJavaFileImpl

        val interfaceName = psiClass.name
        val project = psiClass.project
        val packageName = psiFile.packageName

        val pipelineName = "${packageName}.pipeline.${interfaceName}Pipeline"
        val handlerName = "${packageName}.pipeline.${interfaceName}Handler"
        val handlerContextName = "${packageName}.pipeline.${interfaceName}HandlerContext"
        val abstractHandlerContextName = "${packageName}.pipeline.Abstract${interfaceName}HandlerContext"
        val defaultHandlerContextName = "${packageName}.pipeline.Default${interfaceName}HandlerContext"

        val autoPipelineGenFilesName = listOf(
            pipelineName, handlerName, handlerContextName,
            abstractHandlerContextName, defaultHandlerContextName
        )


        val projectScope = GlobalSearchScope.projectScope(project)
        val javaPsiFacade = JavaPsiFacade.getInstance(project)

        val psiFiles = autoPipelineGenFilesName.map { javaPsiFacade.findClass(it, projectScope) }.filterNotNull()

        if (psiFiles.isEmpty()) {
            return;
        }

        val builder = NavigationGutterIconBuilder.create(Icons.MARKER)
            .setTooltipText("Show class generated by <strong>@AutoPipeline</strong>")
            .setAlignment(GutterIconRenderer.Alignment.RIGHT)
            .setPopupTitle("Class generated by @AutoPipeline for $interfaceName")
            .setTargets(psiFiles)

        result.add(builder.createLineMarkerInfo(element))

    }
}